package com.first.first;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class book1test {

    private book1 contactBook;

    @BeforeEach
    void setUp() {
        // Create a new instance of book1 before each test
        contactBook = new book1();
    }

    @AfterEach
    void tearDown() {
        // Clean up contacts file after each test
        File file = new File("contacts.txt");
        if (file.exists()) {
            file.delete();
        }
    }

    @Test
    void testAddContact() {
        // Add a contact and check if it was added successfully
        contactBook.addContact("John Doe", "1234567890", "john@example.com");
        List<Contact> contacts = contactBook.getContacts();
        
        assertEquals(1, contacts.size(), "There should be one contact");
        assertEquals("John Doe", contacts.get(0).getName(), "Contact name mismatch");
        assertEquals("1234567890", contacts.get(0).getPhone(), "Contact phone mismatch");
        assertEquals("john@example.com", contacts.get(0).getEmail(), "Contact email mismatch");
    }

    @Test
    void testViewContacts() {
        // Redirect output to capture viewContacts output
        contactBook.addContact("Jane Doe", "0987654321", "jane@example.com");
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outContent));
        
        // View contacts
        contactBook.viewContacts();
        
        // Verify the output matches expected contact information
        String expectedOutput = "Name: Jane Doe, Phone: 0987654321, Email: jane@example.com" + System.lineSeparator();
        assertEquals(expectedOutput, outContent.toString(), "viewContacts output mismatch");
        
        // Reset System.out to its original stream
        System.setOut(System.out);
    }

    @Test
    void testDeleteContact() {
        // Add and then delete a contact, verifying it was removed
        contactBook.addContact("Mark Smith", "5555555555", "mark@example.com");
        contactBook.deleteContact("Mark Smith");
        
        List<Contact> contacts = contactBook.getContacts();
        assertTrue(contacts.isEmpty(), "Contact list should be empty after deletion");
    }

    @Test
    void testDeleteNonExistingContact() {
        // Attempt to delete a non-existing contact and verify existing contacts are unaffected
        contactBook.addContact("Alice Johnson", "4444444444", "alice@example.com");
        contactBook.deleteContact("Non Existing");
        
        List<Contact> contacts = contactBook.getContacts();
        assertEquals(1, contacts.size(), "Non-existing contact deletion should not affect contact list");
    }
}
